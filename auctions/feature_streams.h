// -*- mode: c++; fill-column: 80; -*-
#ifndef _FEATURE_STREAMS_H_
#define _FEATURE_STREAMS_H_

/*
 *  feature_stream.h
 *  auctions
 *
 *  Created by Robert Stine on 1/18/08.
 *  Copyright 2008. All rights reserved.
 *
 
 Feature streams implement an abstract protocol and deliver upon request the
 'next' feature.  Each stream combines an iterator that traverses some
 underlying collection of features (be they in a list or generated by a model)
 and a tranformation that operates on the result of the iterator.  The iterator
 can return whatever, so long as it cooperates with the transformation to
 produce a feature vector.

 Feature streams (along with bidders) are held in experts that participate in the
 auction. Experts call
 
        has_feature()
	
 before placing any bids. If the stream has/makes a feature, then a winning
 expert will call
 
        pop()

 which must return a feature vector.  pop() must (a) run very fast and (b)
 return a vector of features.  Heavy lifting required in order to be able to
 pop() must be done in the transformation class.  Certain classes of bidders in
 the calling expert may ask for the number of remaining features in order to
 determine how much to bid.  In order to support such bidding, the stream will
 need to implement

        number_remaining()
 
 Stream properties...
    Streams should be *lightweight*.  They will be copied heavily in the auction.
    Basically act as a stack/queue, a type of iterator really.  The stream itself
    does *not* hold data, just the rules to build new variables.

 Types of streams ...
    Finite           chooses variables from a fixed set of columns as a queue
    Fit              builds features depending on state of model (such as just added var)
    Interaction      interactions among features from a source of fixed size
    Feature-product  interactions between a feature and a fixed set (counts down, as vars in model)
    Cross-product    interactions between fixed set of features and a set of increasing size
    Lag              lags of a given feature
    Polynomial       bundle of several powers at once
    Subspace         several variables as a bundle


  
*/

#include "features.h"
#include "feature_predicates.h"
#include "feature_transformations.h"

#include "light_threads.h"

// polynomial
#include "function_utils.h"
#include "debug.h"

// for finite streams
#include <queue>
#include <iostream>
#include <sstream>
#include <boost/shared_ptr.hpp>

/*
  bool has_feature ()
  {
    if(m_thread.done() && Stream::has_feature_ready())
      return true;
    else if (Stream::can_build_more_features())
      m_thread( boost::bind( &Stream::build_next_feature, this ) );
    else
      debugging::debug("RGST",3) << "threaded, regulated stream '" << Stream::name() <<"' cannot build more features.\n";
    return false;
  }
};

*/

 

template<class Iterator, class Transform>
class FeatureStream
{

private:
  std::string             mName;
  Iterator                mIterator;
  Transform               mTransform;    // copy each time start a new thread
  LightThread<Transform>  mThread;       // use -> to extract information from underlying transform

public:
  ~FeatureStream() { }

  FeatureStream (std::string name, Iterator it, Transform trans)
    : mName(name), mIterator(it), mTransform(trans), mThread() { make_features(); }
  
  std::string    name()                      const { return mName; }
  std::string    feature_name()              const { std::cout << "FS: retrieve name\n"; if (feature_is_ready()) return mThread->output_features()[0].name(); else return "empty/busy"; }
  void           print_to(std::ostream& os)  const { os <<  mName << " @ " << feature_name(); }
  int            number_remaining()          const { return mIterator.number_remaining(); }
  bool           has_feature()                     { std::cout << "FS: has feature?\n"; if(!mThread.done()) return false; if (mThread->empty()) { make_features(); return false;} return true; }
  FeatureVector  pop()                             { std::cout << "FS: pop()\n"; assert (has_feature()); FeatureVector fv (mThread->output_features()); make_features(); return fv; }

private:
  bool feature_is_ready()                          { std::cout << "FS: ready?\n"; if (!mThread.done()) return false; else return !mThread->empty(); }
  void make_features()
    { std::cout << "FS: make_features\n";
      if (mIterator.valid())
      { mTransform.input(*mIterator);
	++mIterator;
	mThread(mTransform);
      }
    }
};

template<class Iterator, class Transform, class Avoid>
std::ostream&
operator<<(std::ostream& os, FeatureStream<Iterator,Transform> const& s) { s.print_to(os); return os; }


// -----------------------------------------------------------------------------------------------------------------------------
//
//     Iterators     Iterators     Iterators     Iterators     Iterators     Iterators     Iterators     Iterators     Iterators
//
// -----------------------------------------------------------------------------------------------------------------------------

class BidOrder
{
public:
  bool operator()(Feature const& a, Feature const& b) const { return (a->entry_bid() < b->entry_bid()); }
};



//     QueueIterator     QueueIterator     QueueIterator     QueueIterator     QueueIterator     QueueIterator     QueueIterator     

class FeatureQueue;

class RefCountedQueue
{
public:
  typedef std::priority_queue<Feature, FeatureVector, BidOrder> Queue;
  Queue   mQueue;
  int     mRefCount;
  
  ~RefCountedQueue() {  }
  
  template<class Collection>
  RefCountedQueue(Collection const& c): mQueue(), mRefCount(1)
    { for (typename Collection::const_iterator it=c.begin(); it!=c.end(); ++it) if (! (*it)->is_constant() ) mQueue.push(*it); }
};


template< class Collection, class SkipPredicate >
class QueueIterator
{
  RefCountedQueue *mpQueue;
  SkipPredicate    mSkipPred;
public:
  ~QueueIterator() { if(--mpQueue->mRefCount == 0) delete mpQueue; }
  
  QueueIterator(Collection const& c, SkipPredicate p) : mpQueue(new RefCountedQueue(c)), mSkipPred(p) { }
  QueueIterator(QueueIterator const& queue)    : mpQueue(queue.mpQueue), mSkipPred(queue.mSkipPred) { ++mpQueue->mRefCount; }

  int    number_remaining()             const { return mpQueue->mQueue.size(); }
  bool   valid()                        const { return !mpQueue->mQueue.empty(); }
  
  QueueIterator&   operator++()        { mpQueue->mQueue.pop(); while( (!mpQueue->mQueue.empty()) && mSkipPred(mpQueue->mQueue.top()) ) mpQueue->mQueue.pop(); return *this; }

  Feature                 operator*()   const { return mpQueue->mQueue.top(); }
    
  void print_to(std::ostream& os)       const { os << "QueueIterator: Holds " << number_remaining() << " features, with reference count " << mpQueue->mRefCount; }

  //  RefCountedQueue::Queue *operator->()  const { return &mpQueue->mQueue; }  // others dont need access to underlying queue
};

template<class Collection, class Pred>
std::ostream&
operator<< (std::ostream& os, QueueIterator<Collection,Pred> const& queue) { queue.print_to(os); return os; }


//     DynamicIterator     DynamicIterator     DynamicIterator     DynamicIterator     DynamicIterator     DynamicIterator     DynamicIterator     
  
template<class Collection, class SkipPredicate>                                  //     waits for source to grow
class DynamicIterator
{
  Collection const& mSource;         // someone else maintains; must be random accessible
  unsigned int      mPosition;
  SkipPredicate     mSkipFeature;
  
public:
  DynamicIterator(Collection const& source, SkipPredicate pred)
    : mSource(source), mPosition(0), mSkipFeature(pred) {  }

  int   number_remaining()              const { return mSource.size() - mPosition; }
  bool  valid()                         const { return mPosition < mSource.size(); }

  DynamicIterator& operator++()               {  ++mPosition; while( (mPosition < mSource.size()) && mSkipFeature(mSource[mPosition]))  ++mPosition;  return *this;}

  Feature          operator*()          const { assert(mPosition < mSource.size()); return mSource[mPosition]; }

  void  print_to(std::ostream& os)      const { os << "DynamicIterator [" << mPosition << "/" << mSource.size() << "] "; }
};

template <class Collection, class Pred>
std::ostream&
operator<< (std::ostream& os, DynamicIterator<Collection,Pred> const& it) { it.print_to(os); return os; }


//     CyclicIterator     CyclicIterator     CyclicIterator     CyclicIterator     CyclicIterator     CyclicIterator

template<class Collection, class SkipPredicate>                                   // CyclicIterator    repeats over and over though collection
class CyclicIterator
{
  typedef typename Collection::const_iterator Iterator;

  Collection const& mSource;         // someone else maintains
  Iterator          mIter;
  int               mSize;
  SkipPredicate     mSkipFeature;
  
public:
  CyclicIterator(Collection const& source, SkipPredicate pred)
    : mSource(source), mIter(source.begin()), mSize(source.size()), mSkipFeature(pred) { }
  
  int   number_remaining()              const { return mSize; }             // number not used in model
  bool  valid()                         const { return !mSource.empty() && (mSize > 0); }

  CyclicIterator& operator++();
  Feature         operator*()           const { return *mIter; }

  void  print_to(std::ostream& os)      const { os << "CyclicIterator @ "; if (valid()) os << *mIter << " ";  else os << " empty "; }
};

template <class Collection, class Pred>
std::ostream&
operator<< (std::ostream& os, CyclicIterator<Collection,Pred> const& it) { it.print_to(os); return os; }



//     LagIterator     LagIterator     LagIterator     LagIterator     LagIterator     LagIterator     LagIterator     LagIterator

class LagIterator
{
  const Feature   mFeature;       // construct lags of this feature
  const int       mBlockSize;     // blocking factor used if longitudinal
  int             mRemaining;
  int             mLag;
  int             mMaxLag;    // cycle through the lags
  
public:  
  LagIterator(Feature const& f, int maxLag, int cycles, int blockSize)
    :  mFeature(f), mBlockSize(blockSize), mRemaining(1+maxLag*cycles), mLag(1), mMaxLag(maxLag) {  }    // 1+ for initial increment
  
  int   number_remaining()         const   { return  mRemaining; }
  bool  valid()                    const   { return  mRemaining > 0; }

  LagIterator&  operator++();
  Feature       operator*()        const   { return  Feature(mFeature,mLag,mBlockSize); }

  void  print_to(std::ostream& os) const { os << "LagIterator @ " << mLag << "/" << mMaxLag << " with " << mRemaining << " left. "; }
};

inline
std::ostream&
operator<< (std::ostream& os, LagIterator const& it) { it.print_to(os); return os; }


//     ModelIterator     ModelIterator     ModelIterator     ModelIterator     ModelIterator     ModelIterator     ModelIterator     

template< class Model >
class ModelIterator
{
  Model const& mModel;    // maintained by someone else
  int          mLastQ;
public:
  ModelIterator(Model const& m): mModel(m), mLastQ(0) {}

  bool   valid()                   const;

  ModelIterator&  operator++()           { return *this; }

  Model const&    operator*()            { mLastQ = mModel.q(); return mModel; }

  void  print_to(std::ostream& os) const { os << "ModelIterator, last q=" << mLastQ << "; model @ " << mModel.q() << " "; }
};
 
template <class Model>
std::ostream&
operator<< (std::ostream& os, ModelIterator<Model> const& it) { it.print_to(os); return os; }


//     BundleIterator     BundleIterator     BundleIterator     BundleIterator     BundleIterator     BundleIterator     BundleIterator

template< class Collection, class SkipPred >   // must be random access collection
class BundleIterator
{
  Collection const&  mSource;      // maintained by someone else
  unsigned int       mBundleSize;
  SkipPred           mSkipPred;
  unsigned int       mLoIndex, mHiIndex;
public:
  BundleIterator(Collection const& source, int bundleSize, SkipPred pred) : mSource(source), mBundleSize(bundleSize), mSkipPred(pred), mLoIndex(0), mHiIndex(0) { }

  bool     valid()              const    { return (mSource.size()-mLoIndex) > mBundleSize; } 

  BundleIterator& operator++()           { return *this; }

  FeatureVector   operator*()   
    { FeatureVector fv;
      while(fv.size() < mBundleSize && mLoIndex < mSource.size())
      { std::cout << " bundle checking feature " << mSource[mLoIndex]->name() << std::endl;
	if (!mSkipPred(mSource[mLoIndex]))
	{ std::cout << " bundle grows \n";
	  fv.push_back(mSource[mLoIndex]);
	}
	++mLoIndex; 
      }
      return fv;
    }
      
  void print_to(std::ostream& os) const { os << "BundleIterator @ [" << mLoIndex << "," << mHiIndex << "] " ; }
};

template <class Collection, class Pred>
std::ostream&
operator<< (std::ostream& os, BundleIterator<Collection,Pred> const& it) { it.print_to(os); return os; }


//    InteractionIterator      InteractionIterator      InteractionIterator      InteractionIterator      InteractionIterator      InteractionIterator      

template<class Collection, class SkipPred>                         // static collection
class InteractionIterator
{
private:
  typedef typename Collection::const_iterator Iter;

  Collection const& mSource;
  bool              mIncludeDiagonal;
  SkipPred          mSkipPred;
  Iter              mpDiagFeature, mpColFeature;
  int               mRemain;
  
public:
  
  InteractionIterator(Collection const& src, bool useSquares, SkipPred pred)
    : mSource(src), mIncludeDiagonal(useSquares), mSkipPred(pred),
      mpDiagFeature(src.begin()), mpColFeature(src.begin()), mRemain(initial_count(src.size())) { if(!mIncludeDiagonal) ++mpColFeature;  }
  
  int   number_remaining()           const { return mRemain; }

  bool  valid ()                     const { return mRemain > 0; }

  InteractionIterator& operator++();
  
  Feature              operator*()   const { assert(mpColFeature != mSource.end()); return Feature(*mpDiagFeature, *mpColFeature); }
  
private:
  int   initial_count(int k)         const { return (k*k-k)/2 + (mIncludeDiagonal?k:0); }
  void  inc_pointers();
};


//     CrossProductIterator     CrossProductIterator     CrossProductIterator     CrossProductIterator     CrossProductIterator     CrossProductIterator     

/*  Combines two dynamically growing sources. You *must* guarantee
    that the sources remain "alive" for the duration of the application.

    Suppose the fast source has 4 elements.  Then

    Position vector {4,2,0} indicates that
            var 0 of the slow source has been crossed with 0,1,2,3 of fast (done with var 0 for now)
	    var 1                    has been crossed with 0,1     of fast, next with third in fast
	    var 2                    has not been crossed with any
*/
  

template <class Predicate>
class CrossProductIterator
{
  FeatureVector const&          mSlowSource, mFastSource;
  unsigned int                  mSlowPosition;
  mutable std::vector<unsigned> mFastPositions;   // may get zeros tacked onto end
  
public:
    
  CrossProductIterator(FeatureVector const& slow, FeatureVector const& fast, Predicate pred)
    : mSlowSource(slow), mFastSource(fast), mSlowPosition(0), mFastPositions() { update_position_vector(); }
  
  int   number_remaining()          const { debugging::debug("CPST",3) << "Meaningless call to number remaining in dynamic stream.\n"; return 0; }   //  for interface only

  bool  valid()                     const { update_position_vector(); return (mSlowPosition < mSlowSource.size()) && (mFastPositions[mSlowPosition] < mFastSource.size()); }

  CrossProductIterator& operator++()
    {
      ++mFastPositions[mSlowPosition];
      mSlowPosition = 0;                                 //  check that list has not grown                                  
      update_position_vector();                                                                                                      
      for(std::vector<unsigned>::const_iterator it=mFastPositions.begin(); it!=mFastPositions.end(); ++it)                                                    
      { if (*it < mFastSource.size())                                                                                          
	  break;                                                                                                                     
	else                                                                                                                         
	  ++mSlowPosition;                                                                                                                
      }
    }
  Feature               operator*() const { assert(valid()); return Feature(mSlowSource[mSlowPosition],mFastSource[mFastPositions[mSlowPosition]]); }

private:
  void  update_position_vector()  { while (mFastPositions.size() < mSlowSource.size()) mFastPositions.push_back(0); }
};





// -----------------------------------------------------------------------------------------------------------------------------
//
//    make__stream     make__stream     make__stream     make__stream     make__stream     make__stream
//
// -----------------------------------------------------------------------------------------------------------------------------

template<class Collection, class Pred>
FeatureStream< CyclicIterator<Collection, Pred>, Identity>
make_finite_stream (std::string const& name, Collection const& source, Pred pred)
{
  return FeatureStream< CyclicIterator<Collection, Pred>, Identity>
    ("CyclicStream::"+name, CyclicIterator<Collection,Pred>(source, pred), Identity());
}

/*

template<class Collection, class Pred, class Trans,class AvoidCollection>
FeatureStream< DynamicIterator<Collection, Pred>, Trans, AvoidCollection>
make_dynamic_stream (std::string const& name, Collection const& source, Pred pred, Trans trans, AvoidCollection const& avoid)
{
  return FeatureStream< DynamicIterator<Collection, Pred>, Trans, AvoidCollection >
    ("DynamicStream::"+name, DynamicIterator<Collection,Pred>(source, pred), trans, avoid);
}


template< class AvoidCollection >
FeatureStream< LagIterator, Identity, AvoidCollection>
make_lag_stream (std::string const& name, Feature const& f, int maxLag, int blockSize, int numberCycles, AvoidCollection const& avoid)
{
  return FeatureStream< LagIterator, Identity, AvoidCollection>
    ("LagStream::"+name, LagIterator(f, maxLag, numberCycles, blockSize), Identity(), avoid);
}


template <class Collection, class AvoidCollection>
FeatureStream< DynamicIterator<Collection, SkipIfDerived>, BuildPolynomialFeature, AvoidCollection>
make_polynomial_stream (std::string const& name, Collection const& src, int degree, AvoidCollection const& avoid)
{
  std::cout << "TEST: make_polynomial_stream of degree " << degree << std::endl;
  return FeatureStream< DynamicIterator<Collection, SkipIfDerived>, BuildPolynomialFeature, AvoidCollection>
    ("Polynomial::"+name, DynamicIterator<Collection,SkipIfDerived>(src, SkipIfDerived()), BuildPolynomialFeature(degree), avoid);
}


template <class Collection,  class AvoidCollection>
FeatureStream< DynamicIterator<Collection, SkipIfDerived>, BuildNeighborhoodFeature, AvoidCollection>
make_neighborhood_stream (std::string const& name, Collection const& src, IntegerColumn const& col, AvoidCollection const& avoid)
{
  std::cout << "TEST: make_neighborhood_stream with indices " << col << std::endl;
  return FeatureStream< DynamicIterator<Collection, SkipIfDerived>, BuildNeighborhoodFeature, AvoidCollection>
    ("Neighborhood::"+name, DynamicIterator<Collection,SkipIfDerived>(src, SkipIfDerived()), BuildNeighborhoodFeature(col), avoid);
}


template <class Collection,  class AvoidCollection>
FeatureStream< QueueIterator<Collection, SkipIfRelated>, BuildProductFeature,AvoidCollection>
make_feature_product_stream (std::string const& name, Collection const& c, Feature const& f, AvoidCollection const& avoid)
{
  std::cout << "FPRS: make_feature_product_stream from feature " << f->name() << std::endl;
  return FeatureStream< QueueIterator<Collection,SkipIfRelated>, BuildProductFeature, AvoidCollection>
    ("Feature-product::"+name, QueueIterator<Collection, SkipIfRelated>(c, SkipIfRelated(f)), BuildProductFeature(f), avoid);
}


template <class Model,  class AvoidCollection>
FeatureStream< ModelIterator<Model>, BuildCalibrationFeature<Model>,AvoidCollection >
make_calibration_stream (std::string const& name, Model const& model, int degree, int skip, AvoidCollection const& avoid)
{
  std::cout << "FPRS: make_calibration_stream of degree " << degree << " with initial skip of " << skip << " cases.\n";
  return FeatureStream< ModelIterator<Model>, BuildCalibrationFeature<Model>, AvoidCollection >
    ("Calibration::"+name, ModelIterator<Model>(model), BuildCalibrationFeature<Model>(degree,skip), avoid);
}


template <class Collection, class Trans,  class AvoidCollection>
FeatureStream< BundleIterator<Collection, SkipIfInBasis>, Trans,AvoidCollection >
make_subspace_stream (std::string const& name, Collection const& src, Trans const& trans, int bundleSize, AvoidCollection const& avoid)
{
  std::cout << "FPRS: make_subspace_stream with bundle size " << bundleSize << std::endl;
  return FeatureStream< BundleIterator<Collection,SkipIfInBasis>, Trans, AvoidCollection >
    ("Subspace::"+name, BundleIterator<Collection,SkipIfInBasis>(src, bundleSize, SkipIfInBasis()), trans, avoid);
}

template <class Collection,  class AvoidCollection>
FeatureStream< InteractionIterator<Collection, SkipIfRelatedPair>, Identity, AvoidCollection >
make_interaction_stream (std::string const& name, Collection const& src, bool useSquares, AvoidCollection const& avoid)
{
  std::cout << "FPRS: make_interaction_stream (static) " << std::endl;
  return FeatureStream< InteractionIterator<Collection,SkipIfRelatedPair>, Identity, AvoidCollection>
    ("Interaction::"+name, InteractionIterator<Collection,SkipIfRelatedPair>(src, useSquares, SkipIfRelatedPair()), Identity(), avoid);
}


template <class Predicate, class AvoidCollection>
FeatureStream< CrossProductIterator<SkipIfRelatedPair>, Identity, AvoidCollection >
make_cross_product_stream (std::string const& name, FeatureVector const& slow, FeatureVector const& fast, bool useSquares, AvoidCollection const& avoid)
{
  std::cout << "FPRS: make_interaction_stream (static) " << std::endl;
  return FeatureStream< CrossProductIterator<SkipIfRelatedPair>, Identity, AvoidCollection>
    ("Interaction::"+name, CrossProductIterator<SkipIfRelatedPair>(slow, fast, SkipIfRelatedPair()), Identity(), avoid);
}
*/

///////////////////////////////////////////////////////////////////////

#include "feature_streams.Template.h"

#endif
