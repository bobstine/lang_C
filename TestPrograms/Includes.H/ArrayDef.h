/*		 	ArrayDef.h							*//*								 6 	Oct 87		*/		/*	 						rev	 9 	Feb 89		*/#ifndef _ArrayDef_#define _ArrayDef_typedef struct		{			int len;			int *pntr;		} INTVECTOR;typedef struct		{			int len;			double *pntr;		} VECTOR;		typedef struct {				int nRows, nCols;				double **pntr;		} MATRIX;typedef struct	{				int nPlanes, nRows, nCols;				double ***pntr;		} CUBE;int SpaceIsAvail (int count);void PrintMemChain (void);void CheckMemPointer (char *ptr, char *str);void AllocVector (int len, VECTOR *vec);void AllocIntVector (int len, INTVECTOR *intVec);void AllocMatrix (int nRows, int nCols, MATRIX *mat);void AllocCube (int numPlanes, int numRows, int numCols, CUBE *theCube);void ResizeVector (int len, VECTOR *vec);void ResizeMatrix (int nRows, int nCols, MATRIX *mat);void ResizeCube (int nPlanes, int nRows, int nCols, CUBE *cube);void DisposeVector (VECTOR *vec);void DisposeIntVector (INTVECTOR *intVec);void DisposeMatrix (MATRIX *mat);	void DisposeCube (CUBE *theCube);double **ColPointers (double *mat, int nRows, int nCols);	/* Returns pointers to rows of the internal C array mat. 	*/	/* Call as ColPointers(mat[0], r,c) to satisfy prototypes.	*/	/* These are treated as cols within the dynamic array type.	*/#endif