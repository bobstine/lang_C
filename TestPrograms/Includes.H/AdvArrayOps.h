/*					AdvArrayOps.h					*//*									14 Oct 87		*//*								rev	17 Oct 87		*//*		Note:										*//*			Calls to record structure have long		*//*				names; those to pointers are short.	*//*			Checking dims only done in long calls.	*/#include "ArrayDef.h"void TransMatrix (MATRIX *mat);void TransMat (double *mat[], int dim);	/* In place transpose of matrix */void MultMatrix (MATRIX *a, MATRIX *b, int aTrans, MATRIX *prod);void MultMat (double *a[], double *b[], int rowsA, int colsA, int colsB,                                       int aTrans, double *prod[]);	/* Transpose the FIRST matrix of product if aTrans. */			/*  INVERSION  */void InvertTriMatrix (MATRIX *mat, MATRIX *inv);void InvertTriMat (double *mat[], int dim, double *inv[]); 	/* Inverts the square matrix mat which is upper triangular of size dim.*/void InvertMatrix (MATRIX *mat, MATRIX *inv);void InvertMat (double *mat[], int dim, double *inv[]);     /* Uses Gaussian elimination with partial pivoting in tableau. */			/*  FACTORIZATION  */			void FactorMatrix (MATRIX *mat, MATRIX *factor);void FactorMat (double *mat[], int dim, double *factor[]);	/* Upper tri factor of symm  pd matrix mat = factor' x factor.	*/	/*	Only uses the upper tri part of input mat.					*/			/*  LINEAR EQUATIONS  */void BackSub (double *r[], int dim, double *cb); 	/* Uses upper triangular r to convert c to b on exit. */    void GramSchmidt (double *x[], int nRows, int nCols, int findCoef, int findRes,					double *y, double *c, double *r[], double *res);    /* Algorithm converts input X array into Q projection matrix.*/	/* Solves for orthog system Q and finds coefs c of Qc = y by ls */void SolveLinearSystem (MATRIX *x, VECTOR *y, VECTOR *b);void SolveSys (double *x[], int nRows, int nCols, double *y, double *b);     /* X is preserved; uses a Gram-Schmidt factorization to obtain QR form.*/void SolveMultiSystem (MATRIX *x, MATRIX *y, MATRIX *b);void SolveMSys (double *x[], int nRows, int nCols, double *y[], int nY, double *b[]);	/* Solves system xb = y with y being a matrix.  */