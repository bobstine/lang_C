// $Id: range_traits.h,v 1.9 2002/03/19 19:07:50 foster Exp $ -*- c++ -*-

#ifndef _RANGE_TRAITS_H
#define _RANGE_TRAITS_H

#ifdef __APPLE__
#include "patch_iterator.h"
#endif

#include <utility>
#include <functional>
#include <vector>
#include <assert.h>

template <class Container>
class range_traits
{
public:
  typedef typename Container::const_iterator iterator;
  typedef typename Container::const_iterator const_iterator;
  typedef iterator_traits<iterator>::iterator_category iterator_category;
  typedef iterator_traits<iterator>::value_type value_type;
  typedef iterator_traits<iterator>::difference_type difference_type;
  typedef iterator_traits<iterator>::pointer pointer;
  typedef iterator_traits<iterator>::reference reference;
};

template <class Range> class range_traits;

template <class Iter>
class range_traits<pair<Iter, Iter> >
{
public:
  typedef Iter iterator;
  typedef Iter const_iterator;
  // can the above be created correctly?  the following works for raw pointers but thats all
  //        typedef iterator_traits<iterator>::reference* const_iterator;
  typedef iterator_traits<iterator>::iterator_category iterator_category;
  typedef iterator_traits<iterator>::value_type value_type;
  typedef iterator_traits<iterator>::difference_type difference_type;
  typedef iterator_traits<iterator>::pointer pointer;
  typedef iterator_traits<iterator>::reference reference;
};


// BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN BEGIN

/*
  template<class Container>
  inline
  typename range_traits<Container>::const_iterator
  begin(const Container& range)
  {
  return range.begin();
  }
*/

template<class Iter>
inline
Iter
begin(const pair<Iter,Iter> range)
{
  return range.first;
}


// END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END  END 

template<class Range,class Result>
Result end(Range);
  
template<class Iter>
inline
Iter
end(const pair<Iter,Iter> range)
{
  return range.second;
}

// CONTAINER VERSION OF RANGE
  
template<class Container>
inline
typename Container::const_iterator
end(const Container& range)
{
  return range.end();
}
  
template<class Container>
inline
typename Container::iterator
end(Container& range)
{
  return range.end();
}
// UNARY_RANGE_TRAITS   UNARY_RANGE_TRAITS   UNARY_RANGE_TRAITS   UNARY_RANGE_TRAITS  

template<class UnaryOp, class I> class forward_unary_iterator;
template<class UnaryOp, class I> class bidirectional_unary_iterator;
template<class UnaryOp, class I> class random_access_unary_iterator;

template <class UnaryOp, class Range, class Tag = typename range_traits<Range>::iterator_category>   
class unary_range_traits;                       

template <class UnaryOp, class Range>
class unary_range_traits<UnaryOp,Range,forward_iterator_tag>
{
public:
  typedef forward_unary_iterator<UnaryOp,typename range_traits<Range>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};
  
template <class UnaryOp, class Range>
class unary_range_traits<UnaryOp,Range,bidirectional_iterator_tag>
{
public:
  typedef bidirectional_unary_iterator<UnaryOp,typename range_traits<Range>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};
  
template <class UnaryOp, class Range>
class unary_range_traits<UnaryOp,Range,random_access_iterator_tag>
{
public:
  typedef random_access_unary_iterator<UnaryOp,typename range_traits<Range>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};

// BINARY_RANGE_TRAITS   BINARY_RANGE_TRAITS   BINARY_RANGE_TRAITS   BINARY_RANGE_TRAITS

template<class BinaryOp, class I1,class I2> class forward_binary_iterator;
template<class BinaryOp, class I1,class I2> class bidirectional_binary_iterator;
template<class BinaryOp, class I1,class I2> class random_access_binary_iterator;

template <class BinaryOp, class Range1, class Range2, class Tag =typename range_traits<Range1>::iterator_category>
  class binary_range_traits;                         

template <class BinaryOp, class Range1, class Range2>
class binary_range_traits<BinaryOp,Range1,Range2,forward_iterator_tag>
{
public:
  typedef typename forward_binary_iterator<BinaryOp,typename range_traits<Range1>::iterator,
						    typename range_traits<Range2>::iterator>::iterator iterator;
  typedef pair<iterator,iterator> range;
};
  
template <class BinaryOp, class Range1, class Range2>
class binary_range_traits<BinaryOp,Range1,Range2,bidirectional_iterator_tag>
{
public:
  typedef bidirectional_binary_iterator<BinaryOp,typename range_traits<Range1>::iterator,
						 typename range_traits<Range2>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};
  
template <class BinaryOp, class Range1, class Range2>
class binary_range_traits<BinaryOp,Range1,Range2,random_access_iterator_tag>
{
public:
  typedef random_access_binary_iterator<BinaryOp, typename range_traits<Range1>::iterator,
  			                          typename range_traits<Range2>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};

// FUNCTION_RANGE_TRAITS   FUNCTION_RANGE_TRAITS   FUNCTION_RANGE_TRAITS   FUNCTION_RANGE_TRAITS  

template<class Iterator> class forward_function_iterator;
template<class Iterator> class bidirectional_function_iterator;
template<class Iterator> class random_access_function_iterator;

template <class Range, class Tag =typename range_traits<Range>::iterator_category>
class function_range_traits;           

template <class Range>
class function_range_traits<Range,forward_iterator_tag>
{
public:
  typedef forward_function_iterator<typename range_traits<Range>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};
  
template <class Range>
class function_range_traits<Range,bidirectional_iterator_tag>
{
public:
  typedef bidirectional_function_iterator<typename range_traits<Range>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};
  
template <class Range>
class function_range_traits<Range,random_access_iterator_tag>
{
public:
  typedef random_access_function_iterator<typename range_traits<Range>::iterator> iterator;
  typedef pair<iterator,iterator> range;
};

#endif
