/*		 	ArrayDef.h	25 Jul 89 ... AllocConstMatrix utility added.	17 Jul 89 ... Move debugging code into MemDebug.h/c					 9 Feb 89		 6 Oct 87				 							*/#ifndef _ArrayDef_#define _ArrayDef_typedef struct		{			int len;			int *pntr;		} IntVector;typedef struct		{			int len;			double *pntr;		} Vector;		typedef struct {				int nRows, nCols;				double **pntr;		} Matrix;typedef struct	{				int nPlanes, nRows, nCols;				double ***pntr;		} Cube;void AllocVector (int len, Vector *vec);void AllocIntVector (int len, IntVector *intVec);void AllocMatrix (int nRows, int nCols, Matrix *mat);void AllocConstMatrix (double theConst, int nRows, int nCols, Matrix *mat);void AllocCube (int numPlanes, int numRows, int numCols, Cube *theCube);void ResizeVector (int len, Vector *vec);void ResizeMatrix (int nRows, int nCols, Matrix *mat);void ResizeCube (int nPlanes, int nRows, int nCols, Cube *cube);void DisposeVector (Vector *vec);void DisposeIntVector (IntVector *intVec);void DisposeMatrix (Matrix *mat);	void DisposeCube (Cube *theCube);double **ColPointers (double *mat, int nRows, int nCols);	/* Returns pointers to rows of the internal C array mat. 	*/	/* Call as ColPointers(mat[0], r,c) to satisfy prototypes.	*/	/* These are treated as cols within the dynamic array type.	*/#endif