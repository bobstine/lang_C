/*	The array processor combines the instruction set	with the memory operations.		10 Sep 90 ... Conversion for library.	16 Jul 89 ... Tag checking added.	14 Jul 89 ... Created*/#ifndef _apMachine_#define _apMachine_#include "apMemory.h"#include "apInstructions.h"typedef struct {			Instruction lastInst;			int randomSeed;			Matrix memory[APMEMORYSIZE+1];		/* the extra is used as placeholder */		} ArrayProcessor;	void apInitArrayProcessor (ArrayProcessor *ap);	pascal int apStoreMatrixAtTag (Matrix *, int, ArrayProcessor *);		int apRetrieveMatrixFromTag (int, Matrix *, ArrayProcessor *);		int apRunInstruction (Instruction *inst, ArrayProcessor *ap);			/* Returns the error code associated with instruction. */		int apRunInstQueue (Instruction *inst, ArrayProcessor *ap);			/* Runs until a stop inst, or an instruction fails. */		Boolean apInstructionTagsCheck (Instruction *theInst, ArrayProcessor *ap);			/* Check memory tags associated with the instruction. */#endif