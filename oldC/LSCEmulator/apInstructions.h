/*	Instructions for array processor	10 Sep 90 ... Revise format of an instruction.	18 Jul 89 ... Remove printing features.	14 Jul 89 ... Created.		NOTE: Each instruction returns an INTEGER error code.			If the code is negative, the routine did not			complete; if it is positive, then the run			may have completed, but not in the expected 			fashion.	*/#ifndef _apInstructions_#include "ArrayDef.h"#define kStore		0 #define	kGetMatrix  1#define kSwap		2		/* checked */#define kReset		3#define kStop		7 		/* checked */	#define	kAllocate	10 		/* checked */#define kDuplicate  11		/* checked */#define	kFree		12		/* checked */#define	kFillConst	20		/* checked */#define	kSetSeeds	21		/* checked */#define	kFillUni	22		/* checked */		#define	kFillNorm	23		/* nyi     */		#define	kAddConst	30		/* checked */#define	kMultConst	31		/* checked */#define	kSquare	    32		/* checked */#define	kSqrt		33		/* nyi 	   */#define	kInvert		34		/* nyi     */#define	kReduce		35		/* checked */	#define	kAdd		40		/* checked */#define kDiff		41		/* checked */#define	kMult		42 		/* checked */#define	kDiv		43		/* nyi     */#define kARGen		50		/*  	   */#define kAREst		51		/* nyi	   */#define kFFT		55		/* nyi	   */typedef struct {				int inst;				int srcTag;				int destTag;				int lastTag;				double value;		} Instruction;	int FillWithConstant (int, double, Matrix *);	int FillWithUniform (int, int seed, Matrix *);	int FillWithNormal (int, int seed, Matrix *);	int AddConstant (int, double, Matrix *);	int MultConstant (int, double, Matrix *);			int Add (int, int, Matrix *);	int Subtract (int, int, Matrix *);	int Multiply (int, int, Boolean trans, int, Matrix *);	int Divide (int, int, int, Matrix *);	int Square (int, int, Matrix *);		int SquareRoot (int, int, Matrix *);	int Invert (int, int, Matrix *);			int Reduce (int, int, int axis, Matrix *);			/* sum along chosen axis (axis=0 -> rows) */			int ARFilter (int coef, int input, int output, Matrix *);/* filter input data */		int AREstimate (int data, int ests, Matrix *);		/* estimate LS coefs */		int ARResidFilter (int, int, int, Matrix *);		/* compute resid vector */	int FFT (int, int, Matrix *);#define _apInstructions_#endif