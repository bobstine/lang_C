;;;;   Check C code for yw and ls  ... use this to match to C test application;;(def y '(1.1  3.2  2.2  -1.2  -3.2  1.3))(def cov (/ (list (inner-product y y)                  (inner-product (butlast y) (rest y))                  (inner-product (butlast (butlast y)) (rest (rest y))))            (length y)))(format t "cov = ~{ ~6,2f~}~%" cov)(def yw (solve (bind-rows (select cov '(0 1)) (select cov '(1 0)))               (select cov '(1 2))))(format t "yw  = ~{ ~6,2f~}~%" yw)(def x  (bind-columns (rest (butlast y)) (butlast (butlast y))))(def yy (rest (rest y)))(print-matrix (setf xx (matmult (transpose  x)  x)))(format t "XY = ~{~6,2f ~}~%" (setf xy (matmult (transpose  x) yy)))                             (format t "b = ~{~6,2f ~}~%" (matmult (inverse xx) xy))         (def ls (send (regression-model x yy :intercept nil :print nil)              :coef-estimates))(format t "ls  = ~{ ~6,2f~}~%" ls);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                                                ;;;;          Now test the shared lib mechanism                     ;;;;                                                                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(format t "Setting up directory...~a~%"        (set-working-directory "Dave:Documents:RAS C:XLispCR:TimeSeries:")); --- Open the library for use  (def lib (shlib::shlib-open "timeSeries.shlb")); --- Get function pointer from the library  (def c-gen (shlib::shlib-symaddr lib "GenerateAR")); --- Build the arguments as C objects  (def err   (coerce (normal-rand 20)      '(vector c-double)))  (def nErr  (coerce (list (length err))   '(vector c-long)))  (def coef  (coerce (vector .6 .2)        '(vector c-double)))  (def nCoef (coerce (list (length coef))  '(vector c-long))); --- Call the function, by address, with arguments passed in by address also  (def addrList (list (shlib::array-data-address err)                      (shlib::array-data-address nErr)                      (shlib::array-data-address coef)                      (shlib::array-data-address nCoef)))  (apply #'shlib::call-by-address          c-gen         addrList); --- Recover data from input arguments  (mean err)