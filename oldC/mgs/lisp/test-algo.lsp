#|  $Id: test-algo.lsp,v 1.1 2002/05/31 21:40:09 bob Exp $

  The code in this file tests the algorithms for finding the conservative
  F-test value for adding a variable to a regression model.  The arguments
  to these functions are

     z - the new guy to be added to the regression

     x - the collection of predictors already in the model

     y - the response variable.

  The functions all seek to find this result, but by increasing less obvious
  methods.  The first is a direct implementation that also allows one to 
  contrast the conservative F with the more direct F obtained by the usual
  regression test (ie, the t^2).

;--- Generate some test data  
  (def z (repeat '(1 2 3 4) 5))
  (def y (+ (* 3 z) (normal-rand 20)))
  (def c (repeat 1 (length y)))
  (def x (list c (iseq 20) (repeat '(1 2) 10)))
 
;--- This version uses the two regressions explicitly
;    The 3 values contrast the effects of projections on numerator.     

; --- Start with the nil model that has just a constant
  (chg-rss z (list c) y)
  (f-direct z (list c) y)
  (f-direct z x y)

;--- This version uses the QR decomposition instead
  (f-indirect z (list c) y)
  (f-indirect z x y)

;;;;  Now test using the data generated by the C routine

  (def data (transpose 
              (read-c-data "/home/bob/C/mgs-sweep2/test.dat")))
  (def y (select data 1))
  (def x (select data (iseq 2 9)))

;--- Initial features
  (format t "Mean = ~6,2f with SS(y) = ~6,2f~%"
     (mean y) (sum (^ (- y (mean y)) 2)))

;--- QR decomp
  (def qr (qr-decomp 
            (apply #'bind-columns
               (list (repeat 1 (length y))
                     (select x 1)
                     (select x 4)))))
  (def q (first qr))
  (def r (second qr))
  (print-matrix r t :float-digits 3)

  (setf xx1 (* (select (column-list q) 1)  (aref r 1 1)))  ; match to c code for x1
  
  (inner-product xx1 (- (select x 4) (mean (select x 4)))  )

;--- Check effect of adding one given only a constant
  (let* ((x2 (select x 1))
         (z  (select x 4))
         (c (repeat 1 (length z)))  )
    (chg-rss z (list c x2) y)
    (f-indirect z (list c x2) y))

|#

(defun READ-C-DATA (fileName)
  (with-open-file (f fileName)
		  (format t "dims are ~d ~d~%" 
			  (setf nlines (read f)) (setf nCols (read f)))
		  (let ((data nil))
		    (dotimes (i nLines)
			     (push (let ((x nil))
				     (format t "i=~d~%" i)
				     (dotimes (j nCols (reverse x))
					      (push (read f) x))
				     )
				   data))
		    (reverse data))))
		    

(defun CHG-RSS (z x y)
  (let* ((r1 (regression-model x y :print nil :intercept nil))
	 (rz (regression-model (cons z x) y :print nil :intercept nil))
	 )
    (format t "Change in RSS is ~10,5f~%"
	    (- (send r1 :residual-sum-of-squares)
	       (send rz :residual-sum-of-squares)))
    ))

(defun F-DIRECT (z x y)
  (let* ((ry (regression-model x y :print nil :intercept nil))
	 (y~ (send ry :raw-residuals))
	 (rz (regression-model x z :print nil :intercept nil))
	 (z~ (send rz :raw-residuals))  
	 (num  (list (inner-product z~ y)
		     (inner-product z  y~)
		     (inner-product z~ y~)))
	 (den  (inner-product (* y~ y~ z~) z~))    )
    (format t "num = ~a   den = ~a~%" (first num) den)
    (/ (^ num 2) den)))

(defun F-INDIRECT (z x y)
  (let* ((e      (send (regression-model x y :print nil :intercept nil)
		       :raw-residuals))
	 (v      (* e e))
	 (decomp (qr-decomp (apply #'bind-columns x)))
	 (Q      (first decomp))
	 (num    (- (inner-product y z) ; or just (inner-product e z)
		    (inner-product (matmult (transpose q) y)
				   (matmult (transpose q) z))))
	 (QVQ    (matmult (transpose Q) (diagonal v) Q))
	 (zV     (* z v))
	 (Qz     (matmult (transpose Q) z))
	 (QVz    (matmult (transpose Q) zV))
	 (j      (format t "QVQ=~a  Qz = ~a   QVz = ~a~%" qvq qz qvz))
	 (den1   (inner-product zV z))
	 (j      (format t "den1 = ~a~%" den1))
	 (den2   (- den1 (* 2 (inner-product qvz Qz))))
	 (j      (format t "den2 = ~a~%" den2))
	 (den    (+ den2 (inner-product (matmult Qz QVQ) Qz)))  )
    (format t "First two rows of Q matrix:~% ~a ~%"
	    (select (row-list Q) '(0 1)))
    (format t "num = ~a  den = ~a~%" num den)
    (/ (^ num 2) den)
    ))
					  