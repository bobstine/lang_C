------------ Current

	Have to remove the calibrator in order to save the calibrator, unless
	the model 'remembers its fit' that was used prior to adding the calibrator.

	Building my_features.test.exec...
	Smoothing spline operator running into problems when try
	to build a feature with a smoothing spline.  Wants to copy
        construct, and that's not good.  But why so many times?

	Need for the spline to become an object with state so that it can
	become a feature and be stored.  Could write coefs to a file if needed.
	Need a calibrator object that acts like a feature.  Something like
	a unary range that could just compute f(y^) with y^ from another
	formula.

------------ Do next

The model ought to be responsible for reading/writing the calibration
function, with the auction, estimator, and validator having no idea
what sort of beast is being used for the calibration.  Leave all of
that encapsulated in the model, or in some template parameter that
becomes part of the model.

Add other types of recommenders that either pass through the data a
second time or use other methods to construct features.  At 800
rounds, pretty much done with the set of feature generators tried
here.

Model linear combination does not have to be recomputed as I am doing;
after all, the fit is known.

Speed up the caching of centers and scales; get more use from these.

Get dummy property propagated better in ABC or cache for features.

Odds and ends

	Shorter, less jumbled names for linear combinations.

	Template more things in the feature factory so that not so
	bound to a vector of features.

	Feature factory ought to free space when done.


------------ Remember that

BIDDERS, RECOMMENDERS, and FEATURES are all abstract classes.

All get tossed around as pointers.  This is especially true for the
features.  Various things can modify a feature.

---

BIDDERS place all of the bids in the auction.  The auction only sees
the bidders, not the underlying recommenders or data columns.

BIDDERS come in a one to one correspondence with RECOMMENDERS.

RECOMMENDERS offer features to BIDDERS in the auction.  At the moment,
each bidder looks at only one recommender, but several bidders can bid
on the same recommender.

Recommenders come in two flavors.  One builds features directly from a
collection of columns.  The other uses some 'source' of features,
which can include the auction itself.

FEATURES are the items of the auction.  

COLUMNS are the repository of the data used to build the features, but
columns themselves are never offered directly by recommenders.


--------------  Dead Bugs

	Smoothing spline is not working correctly. I need to test smoothing 
	spline code with bigger problem to see if I can figure out why its dying
	when I build auction_test.

The value of the smoothing spline is not quite an average of the data,
so you can get values that are negative or larger than 1.  These
caused the logit function to return nan.  Logit now checks for a
proper range.

---

	Spline fit fails as well as SE jumps to huge value after get it
	to add dummy missing data indicator by switching to hybrid optimizer
	rather than pure newton method.

The spline code has a hard time finding lambda from the input df
unless the data are widely spread.  So, I just round to a 'coarse
grid' (1000 pts on [0,1]) and let the algorithm take care to join up
the associated y's.

---

	How should a model handle the calibrator column since it
	is not a feature like the other predictors.

Have to make a feature that is the smoothing spline or other
calibrator.  Otherwise cannot force the appropriate cross-validation
to happen.
